// 1D-array
// Given an array of numbers, Push all the zero’s of a given array to the end
// of the array. For example, if the given arrays is 1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0,
// it should be changed to 1, 9, 8, 4, 2, 7, 6, 0, 0, 0, 0. The order of all other
// elements should be same.

***

//Solution

/*Միայն մեկ ցիկլով լուծելու դեքում առաջանում է խնդիր այն բանի հետ կապված, որ եթե array-ի մեջ >
երկու հաջորդական 0-ներ գտնվեն անմիջապես իրար կողք կողքի (ինչպես մեր օրինակում 4-րդ և 5-րդ ինդեքսներն են 0 արժեքով), >
ապա slice-ի հետևանքով, երբ 0-ները տեղափոխվեն դեպի array-ի վերջը և array-ի մնացած անդամները անմիջապես սկսում են դասավորվել դեպի իրենցից մեկ հատ ձախ ԻՆԴԵՔՍԻ, > 
ապա ցիկլի հերթական իտերացիան i+1 գործողություն անելուց բաց է թողնում array-ի 0 արժեք ունեցող այն i-երորդի կողքին գտնվող ինդեքսովը, որի արժեքը նույնպես 0 էր, >
այսինքն slice-ի հետևանքով նախորդ տեղափոխված 0-ի աջ կողքին գտնվող 0-ն տեղափոխվեց ձախ, ցիկլն էլ + 1 քայլ արեց i-ին,7  փաստորեն 0-ի կողքը գտնվող այն 0-ն որը պետք է >
մտներ ցիկլի մեջ ու slice-ի ենթարկվեց, այս տեղափոխման հետևանքով խուսափեց ցիկլից: >
Դրա համար կոնկրետ այս օրինակում երկու անգամ եմ ցիկլ ֆռացել array-ի վրա, որպեսզի բաց թողնված 0-ները դարձյալ վերցնեմ և տեղադրեմ array-ի վերջում: >
Սակայն սա էլ վերջնական լուծում չէ, քանի որ եթե մեր խնդրի մեջ անմիջապես իրար կողք գտնվեն ոչ թե միաժամանակ երկու հատ 0, այլ օրինակ 17 հատ 0-ներ, ապա >
անհրաժեշտություն է առաջանալու դարձյալ բազմաթիվ ցիկլներ ֆռալ վերջնական array-ներիի վրա որոշ 0-ներին բաց չթողնելու համար, >
և որպեսզի ցիկլի ժամանակ slice-ի և իտերացիա + 1-ի հետևանքով հետ ընկած 0-ները բաց չթողնվեն և բոլոր 0-ները ինդեքսի խախտման հետևանքով կարողանան տռեղափոխվել array-ի վերջը,
դրա համար խնդիրը լուծել եմ ցիկլը ցիկլի մեջ տարբերակով, որպես խնդրի ընդհանուր լուծում՝ կամայական իրար կողք շարված 0-ներով array-ի դեպքում:

**Այս մի լուծման տարբերակը թողնում եմ այստեղ՝ որպես ընդամենը կոնկրետ Ձեր այս տրված օրինակի լուծում, իսկ տակը գրել եմ արդեն ընդհանուր լուծումը:*/

function orderArr(arr){
  for(let i = 0; i < arr.length; i++){
    if(arr[i] === 0){
      console.log(arr + ' սկզբնական arr');
      let x = arr.splice(i, 1);
      console.log('այս անգամ ' + x + '-ն' + ' մեր array-ի ' + i + '-ԵՐՈՐԴ ԻՆԴԵՔՍՆ է:');
      arr.push(x[0]); // x[0] > որպեսզի concat անի ոչ թե array, այլ հենց մեջի անդամը: Որպեսզի nested arrays չտսացվի:
      console.log(arr + ' > arr-ն slice/concat փոփոխությունից հետո:');
    }
  }
  for(let j = 0; j < arr.length; j++){
    if(arr[j] === 0){
      console.log(arr + ' սկզբնական arr');
      let y = arr.splice(j, 1);
      console.log('այս անգամ 0-ն մեր array-ի ' + j + '-ԵՐՈՐԴ ԻՆԴԵՔՍՆ է:');
      arr.push(y[0]);
      console.log(arr + ' > arr-ն slice/concat-ից հետո:');
    }
  }
  return arr;
}
console.log(orderArr([1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0]));


/*Ընդհանուր լուծում*/

function orderArr(arr){
  for(let i = 0; i < arr.length; i++){
    for(let j = 0; j < arr.length; j++){
      if(arr[j] === 0){
        let x = arr.splice(j, 1);
        arr.push(x[0]);
      }
    }
  }
  return arr;
}
console.log(orderArr([1, 9, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 0, 6, 0]));